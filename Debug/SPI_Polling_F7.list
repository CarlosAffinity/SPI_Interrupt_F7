
SPI_Polling_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044dc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080046a4  080046a4  000146a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046bc  080046bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080046bc  080046bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c4  080046c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080046cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000010  080046dc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  080046dc  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b28  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002955  00000000  00000000  00031b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  000344c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  000352b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026cac  00000000  00000000  00035f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001192b  00000000  00000000  0005cc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef9b3  00000000  00000000  0006e54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015df02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a4  00000000  00000000  0015df58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800468c 	.word	0x0800468c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	0800468c 	.word	0x0800468c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000504:	4b24      	ldr	r3, [pc, #144]	; (8000598 <MX_ETH_Init+0x98>)
 8000506:	4a25      	ldr	r2, [pc, #148]	; (800059c <MX_ETH_Init+0x9c>)
 8000508:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800050a:	4b23      	ldr	r3, [pc, #140]	; (8000598 <MX_ETH_Init+0x98>)
 800050c:	2201      	movs	r2, #1
 800050e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000510:	4b21      	ldr	r3, [pc, #132]	; (8000598 <MX_ETH_Init+0x98>)
 8000512:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000516:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <MX_ETH_Init+0x98>)
 800051a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800051e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000520:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <MX_ETH_Init+0x98>)
 8000522:	2200      	movs	r2, #0
 8000524:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000526:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <MX_ETH_Init+0x98>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <MX_ETH_Init+0x98>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	3301      	adds	r3, #1
 8000534:	2280      	movs	r2, #128	; 0x80
 8000536:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000538:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_ETH_Init+0x98>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	3302      	adds	r3, #2
 800053e:	22e1      	movs	r2, #225	; 0xe1
 8000540:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_ETH_Init+0x98>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	3303      	adds	r3, #3
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_ETH_Init+0x98>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	3304      	adds	r3, #4
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_ETH_Init+0x98>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	3305      	adds	r3, #5
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <MX_ETH_Init+0x98>)
 8000562:	2200      	movs	r2, #0
 8000564:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_ETH_Init+0x98>)
 8000568:	2200      	movs	r2, #0
 800056a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <MX_ETH_Init+0x98>)
 800056e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000572:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN MACADDRESS */
  /*
  * Cuando el puerto ethernet no esta conectado la funcion HAL_ETH_Init devuelve HAL_TIMEOUT
  * y se queda en un bucle infinito
  */
  if (HAL_ETH_Init(&heth) == HAL_TIMEOUT)
 8000574:	4808      	ldr	r0, [pc, #32]	; (8000598 <MX_ETH_Init+0x98>)
 8000576:	f000 fdf3 	bl	8001160 <HAL_ETH_Init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b03      	cmp	r3, #3
 800057e:	d008      	beq.n	8000592 <MX_ETH_Init+0x92>
	  return;
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_ETH_Init+0x98>)
 8000582:	f000 fded 	bl	8001160 <HAL_ETH_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d003      	beq.n	8000594 <MX_ETH_Init+0x94>
  {
    Error_Handler();
 800058c:	f000 fa54 	bl	8000a38 <Error_Handler>
 8000590:	e000      	b.n	8000594 <MX_ETH_Init+0x94>
	  return;
 8000592:	bf00      	nop
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000030 	.word	0x20000030
 800059c:	40028000 	.word	0x40028000

080005a0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08e      	sub	sp, #56	; 0x38
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a4e      	ldr	r2, [pc, #312]	; (80006f8 <HAL_ETH_MspInit+0x158>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	f040 8096 	bne.w	80006f0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80005c4:	4b4d      	ldr	r3, [pc, #308]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c8:	4a4c      	ldr	r2, [pc, #304]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ce:	6313      	str	r3, [r2, #48]	; 0x30
 80005d0:	4b4a      	ldr	r3, [pc, #296]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d8:	623b      	str	r3, [r7, #32]
 80005da:	6a3b      	ldr	r3, [r7, #32]
 80005dc:	4b47      	ldr	r3, [pc, #284]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	4a46      	ldr	r2, [pc, #280]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005e6:	6313      	str	r3, [r2, #48]	; 0x30
 80005e8:	4b44      	ldr	r3, [pc, #272]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005f0:	61fb      	str	r3, [r7, #28]
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	4b41      	ldr	r3, [pc, #260]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	4a40      	ldr	r2, [pc, #256]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000600:	4b3e      	ldr	r3, [pc, #248]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000608:	61bb      	str	r3, [r7, #24]
 800060a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800060c:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a3a      	ldr	r2, [pc, #232]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
 8000618:	4b38      	ldr	r3, [pc, #224]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	4b35      	ldr	r3, [pc, #212]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a34      	ldr	r2, [pc, #208]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
 8000630:	4b32      	ldr	r3, [pc, #200]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800063c:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	4a2e      	ldr	r2, [pc, #184]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000642:	f043 0302 	orr.w	r3, r3, #2
 8000646:	6313      	str	r3, [r2, #48]	; 0x30
 8000648:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000654:	4b29      	ldr	r3, [pc, #164]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000658:	4a28      	ldr	r2, [pc, #160]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800065a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065e:	6313      	str	r3, [r2, #48]	; 0x30
 8000660:	4b26      	ldr	r3, [pc, #152]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800066c:	2332      	movs	r3, #50	; 0x32
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	2302      	movs	r3, #2
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800067c:	230b      	movs	r3, #11
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000684:	4619      	mov	r1, r3
 8000686:	481e      	ldr	r0, [pc, #120]	; (8000700 <HAL_ETH_MspInit+0x160>)
 8000688:	f001 f9d4 	bl	8001a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800068c:	2386      	movs	r3, #134	; 0x86
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800069c:	230b      	movs	r3, #11
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a4:	4619      	mov	r1, r3
 80006a6:	4817      	ldr	r0, [pc, #92]	; (8000704 <HAL_ETH_MspInit+0x164>)
 80006a8:	f001 f9c4 	bl	8001a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ba:	2303      	movs	r3, #3
 80006bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006be:	230b      	movs	r3, #11
 80006c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c6:	4619      	mov	r1, r3
 80006c8:	480f      	ldr	r0, [pc, #60]	; (8000708 <HAL_ETH_MspInit+0x168>)
 80006ca:	f001 f9b3 	bl	8001a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e0:	230b      	movs	r3, #11
 80006e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e8:	4619      	mov	r1, r3
 80006ea:	4808      	ldr	r0, [pc, #32]	; (800070c <HAL_ETH_MspInit+0x16c>)
 80006ec:	f001 f9a2 	bl	8001a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80006f0:	bf00      	nop
 80006f2:	3738      	adds	r7, #56	; 0x38
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40028000 	.word	0x40028000
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000
 8000708:	40020400 	.word	0x40020400
 800070c:	40021800 	.word	0x40021800

08000710 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	; 0x30
 8000714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b46      	ldr	r3, [pc, #280]	; (8000840 <MX_GPIO_Init+0x130>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a45      	ldr	r2, [pc, #276]	; (8000840 <MX_GPIO_Init+0x130>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b43      	ldr	r3, [pc, #268]	; (8000840 <MX_GPIO_Init+0x130>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	4b40      	ldr	r3, [pc, #256]	; (8000840 <MX_GPIO_Init+0x130>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a3f      	ldr	r2, [pc, #252]	; (8000840 <MX_GPIO_Init+0x130>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <MX_GPIO_Init+0x130>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b3a      	ldr	r3, [pc, #232]	; (8000840 <MX_GPIO_Init+0x130>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a39      	ldr	r2, [pc, #228]	; (8000840 <MX_GPIO_Init+0x130>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b37      	ldr	r3, [pc, #220]	; (8000840 <MX_GPIO_Init+0x130>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b34      	ldr	r3, [pc, #208]	; (8000840 <MX_GPIO_Init+0x130>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a33      	ldr	r2, [pc, #204]	; (8000840 <MX_GPIO_Init+0x130>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b31      	ldr	r3, [pc, #196]	; (8000840 <MX_GPIO_Init+0x130>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <MX_GPIO_Init+0x130>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2d      	ldr	r2, [pc, #180]	; (8000840 <MX_GPIO_Init+0x130>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b2b      	ldr	r3, [pc, #172]	; (8000840 <MX_GPIO_Init+0x130>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800079e:	4b28      	ldr	r3, [pc, #160]	; (8000840 <MX_GPIO_Init+0x130>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a27      	ldr	r2, [pc, #156]	; (8000840 <MX_GPIO_Init+0x130>)
 80007a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b25      	ldr	r3, [pc, #148]	; (8000840 <MX_GPIO_Init+0x130>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80007bc:	4821      	ldr	r0, [pc, #132]	; (8000844 <MX_GPIO_Init+0x134>)
 80007be:	f001 fafd 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	4820      	ldr	r0, [pc, #128]	; (8000848 <MX_GPIO_Init+0x138>)
 80007c8:	f001 faf8 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80007cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d6:	2302      	movs	r3, #2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	481a      	ldr	r0, [pc, #104]	; (800084c <MX_GPIO_Init+0x13c>)
 80007e2:	f001 f927 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007e6:	f244 0381 	movw	r3, #16513	; 0x4081
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4811      	ldr	r0, [pc, #68]	; (8000844 <MX_GPIO_Init+0x134>)
 8000800:	f001 f918 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000804:	2340      	movs	r3, #64	; 0x40
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	480b      	ldr	r0, [pc, #44]	; (8000848 <MX_GPIO_Init+0x138>)
 800081c:	f001 f90a 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_GPIO_Init+0x138>)
 8000834:	f001 f8fe 	bl	8001a34 <HAL_GPIO_Init>

}
 8000838:	bf00      	nop
 800083a:	3730      	adds	r7, #48	; 0x30
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40020400 	.word	0x40020400
 8000848:	40021800 	.word	0x40021800
 800084c:	40020800 	.word	0x40020800

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000854:	f000 fb1d 	bl	8000e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000858:	f000 f85e 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085c:	f7ff ff58 	bl	8000710 <MX_GPIO_Init>
  MX_ETH_Init();
 8000860:	f7ff fe4e 	bl	8000500 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000864:	f000 f9ee 	bl	8000c44 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000868:	f000 fa60 	bl	8000d2c <MX_USB_OTG_FS_PCD_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);//PIN DE SS
 800086c:	2201      	movs	r2, #1
 800086e:	2120      	movs	r1, #32
 8000870:	4823      	ldr	r0, [pc, #140]	; (8000900 <main+0xb0>)
 8000872:	f001 faa3 	bl	8001dbc <HAL_GPIO_WritePin>
  MX_SPI1_Init();
 8000876:	f000 f8e5 	bl	8000a44 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  while (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)!= GPIO_PIN_SET){
 800087a:	e007      	b.n	800088c <main+0x3c>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2101      	movs	r1, #1
 8000880:	4820      	ldr	r0, [pc, #128]	; (8000904 <main+0xb4>)
 8000882:	f001 fa9b 	bl	8001dbc <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000886:	2064      	movs	r0, #100	; 0x64
 8000888:	f000 fb60 	bl	8000f4c <HAL_Delay>
  while (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin)!= GPIO_PIN_SET){
 800088c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000890:	481d      	ldr	r0, [pc, #116]	; (8000908 <main+0xb8>)
 8000892:	f001 fa7b 	bl	8001d8c <HAL_GPIO_ReadPin>
 8000896:	4603      	mov	r3, r0
 8000898:	2b01      	cmp	r3, #1
 800089a:	d1ef      	bne.n	800087c <main+0x2c>
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);//PIN DE SS
 800089c:	2200      	movs	r2, #0
 800089e:	2120      	movs	r1, #32
 80008a0:	4817      	ldr	r0, [pc, #92]	; (8000900 <main+0xb0>)
 80008a2:	f001 fa8b 	bl	8001dbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2101      	movs	r1, #1
 80008aa:	4816      	ldr	r0, [pc, #88]	; (8000904 <main+0xb4>)
 80008ac:	f001 fa86 	bl	8001dbc <HAL_GPIO_WritePin>
  switch (HAL_SPI_Transmit(&hspi1,(uint8_t *)aTxBuffer, 4, 5000))
 80008b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80008b4:	2204      	movs	r2, #4
 80008b6:	4915      	ldr	r1, [pc, #84]	; (800090c <main+0xbc>)
 80008b8:	4815      	ldr	r0, [pc, #84]	; (8000910 <main+0xc0>)
 80008ba:	f002 fd32 	bl	8003322 <HAL_SPI_Transmit>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d00a      	beq.n	80008da <main+0x8a>
 80008c4:	2b03      	cmp	r3, #3
 80008c6:	dc10      	bgt.n	80008ea <main+0x9a>
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <main+0x82>
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d008      	beq.n	80008e2 <main+0x92>
 80008d0:	e00b      	b.n	80008ea <main+0x9a>
  	  {
  	    case HAL_OK:
  	      /* Communication is completed ___________________________________________ */
  	    	  i=1;
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <main+0xc4>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
  	      break;
 80008d8:	e00b      	b.n	80008f2 <main+0xa2>

  	    case HAL_TIMEOUT:
  	    /* An Error Occur ______________________________________________________ */
  	    	i=3;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <main+0xc4>)
 80008dc:	2203      	movs	r2, #3
 80008de:	701a      	strb	r2, [r3, #0]
  	    	break;
 80008e0:	e007      	b.n	80008f2 <main+0xa2>
  	    case HAL_ERROR:
  	      /* Call Timeout Handler */
  	    	i=4;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <main+0xc4>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	701a      	strb	r2, [r3, #0]
  	      //Error_Handler();
  	      break;
 80008e8:	e003      	b.n	80008f2 <main+0xa2>
  	    default:
  	    	i=5;
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <main+0xc4>)
 80008ec:	2205      	movs	r2, #5
 80008ee:	701a      	strb	r2, [r3, #0]
  	      break;
 80008f0:	bf00      	nop
  	  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2120      	movs	r1, #32
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <main+0xb0>)
 80008f8:	f001 fa60 	bl	8001dbc <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <main+0xac>
 80008fe:	bf00      	nop
 8000900:	40020000 	.word	0x40020000
 8000904:	40020400 	.word	0x40020400
 8000908:	40020800 	.word	0x40020800
 800090c:	20000000 	.word	0x20000000
 8000910:	20000078 	.word	0x20000078
 8000914:	2000002c 	.word	0x2000002c

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b0b4      	sub	sp, #208	; 0xd0
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000922:	2230      	movs	r2, #48	; 0x30
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fea8 	bl	800467c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	2284      	movs	r2, #132	; 0x84
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fe99 	bl	800467c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800094a:	f001 fb99 	bl	8002080 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <SystemClock_Config+0x114>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a36      	ldr	r2, [pc, #216]	; (8000a2c <SystemClock_Config+0x114>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b34      	ldr	r3, [pc, #208]	; (8000a2c <SystemClock_Config+0x114>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000966:	4b32      	ldr	r3, [pc, #200]	; (8000a30 <SystemClock_Config+0x118>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800096e:	4a30      	ldr	r2, [pc, #192]	; (8000a30 <SystemClock_Config+0x118>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6013      	str	r3, [r2, #0]
 8000976:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <SystemClock_Config+0x118>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000982:	2301      	movs	r3, #1
 8000984:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000988:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800098c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000990:	2302      	movs	r3, #2
 8000992:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800099e:	2304      	movs	r3, #4
 80009a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009a4:	2348      	movs	r3, #72	; 0x48
 80009a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009b0:	2303      	movs	r3, #3
 80009b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f001 fb70 	bl	80020a0 <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009c6:	f000 f837 	bl	8000a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	230f      	movs	r3, #15
 80009cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d0:	2302      	movs	r3, #2
 80009d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009ee:	2102      	movs	r1, #2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f001 fdf9 	bl	80025e8 <HAL_RCC_ClockConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80009fc:	f000 f81c 	bl	8000a38 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <SystemClock_Config+0x11c>)
 8000a02:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 ffea 	bl	80029ec <HAL_RCCEx_PeriphCLKConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000a1e:	f000 f80b 	bl	8000a38 <Error_Handler>
  }
}
 8000a22:	bf00      	nop
 8000a24:	37d0      	adds	r7, #208	; 0xd0
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40007000 	.word	0x40007000
 8000a34:	00200100 	.word	0x00200100

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <MX_SPI1_Init+0x78>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000a50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000a5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000a72:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000a7a:	2228      	movs	r2, #40	; 0x28
 8000a7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000a92:	2207      	movs	r2, #7
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_SPI1_Init+0x74>)
 8000aa4:	f002 fb92 	bl	80031cc <HAL_SPI_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000aae:	f7ff ffc3 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000078 	.word	0x20000078
 8000abc:	40013000 	.word	0x40013000

08000ac0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a25      	ldr	r2, [pc, #148]	; (8000b74 <HAL_SPI_MspInit+0xb4>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d143      	bne.n	8000b6a <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <HAL_SPI_MspInit+0xb8>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a24      	ldr	r2, [pc, #144]	; (8000b78 <HAL_SPI_MspInit+0xb8>)
 8000ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <HAL_SPI_MspInit+0xb8>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <HAL_SPI_MspInit+0xb8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a1e      	ldr	r2, [pc, #120]	; (8000b78 <HAL_SPI_MspInit+0xb8>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <HAL_SPI_MspInit+0xb8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_SPI_MspInit+0xb8>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <HAL_SPI_MspInit+0xb8>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_SPI_MspInit+0xb8>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b2a:	2330      	movs	r3, #48	; 0x30
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b3a:	2305      	movs	r3, #5
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <HAL_SPI_MspInit+0xbc>)
 8000b46:	f000 ff75 	bl	8001a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b4a:	2320      	movs	r3, #32
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <HAL_SPI_MspInit+0xc0>)
 8000b66:	f000 ff65 	bl	8001a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40013000 	.word	0x40013000
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020400 	.word	0x40020400

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_MspInit+0x44>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x44>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_MspInit+0x44>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	; 0x44
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_MspInit+0x44>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 f978 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c4a:	4a15      	ldr	r2, [pc, #84]	; (8000ca0 <MX_USART3_UART_Init+0x5c>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_USART3_UART_Init+0x58>)
 8000c88:	f002 fe1a 	bl	80038c0 <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c92:	f7ff fed1 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000dc 	.word	0x200000dc
 8000ca0:	40004800 	.word	0x40004800

08000ca4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0x7c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d128      	bne.n	8000d18 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <HAL_UART_MspInit+0x80>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <HAL_UART_MspInit+0x80>)
 8000ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <HAL_UART_MspInit+0x80>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_UART_MspInit+0x80>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <HAL_UART_MspInit+0x80>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_UART_MspInit+0x80>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <HAL_UART_MspInit+0x84>)
 8000d14:	f000 fe8e 	bl	8001a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	; 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40004800 	.word	0x40004800
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020c00 	.word	0x40020c00

08000d2c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3a:	2206      	movs	r2, #6
 8000d3c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d70:	f001 f83d 	bl	8001dee <HAL_PCD_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d7a:	f7ff fe5d 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000160 	.word	0x20000160

08000d88 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000da8:	d141      	bne.n	8000e2e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <HAL_PCD_MspInit+0xb0>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <HAL_PCD_MspInit+0xb0>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_PCD_MspInit+0xb0>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dc2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dd4:	230a      	movs	r3, #10
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4817      	ldr	r0, [pc, #92]	; (8000e3c <HAL_PCD_MspInit+0xb4>)
 8000de0:	f000 fe28 	bl	8001a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <HAL_PCD_MspInit+0xb4>)
 8000dfa:	f000 fe1b 	bl	8001a34 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_PCD_MspInit+0xb0>)
 8000e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e02:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <HAL_PCD_MspInit+0xb0>)
 8000e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e08:	6353      	str	r3, [r2, #52]	; 0x34
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_PCD_MspInit+0xb0>)
 8000e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_PCD_MspInit+0xb0>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_PCD_MspInit+0xb0>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e20:	6453      	str	r3, [r2, #68]	; 0x44
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_PCD_MspInit+0xb0>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e46:	490e      	ldr	r1, [pc, #56]	; (8000e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e5c:	4c0b      	ldr	r4, [pc, #44]	; (8000e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e6a:	f7ff fed9 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f003 fbe1 	bl	8004634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fced 	bl	8000850 <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e78:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e84:	080046cc 	.word	0x080046cc
  ldr r2, =_sbss
 8000e88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e8c:	20000568 	.word	0x20000568

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>

08000e92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 f92e 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f000 f805 	bl	8000eac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000ea2:	f7ff fe6f 	bl	8000b84 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_InitTick+0x54>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x58>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f93b 	bl	8001146 <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f000 f911 	bl	800110e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <HAL_InitTick+0x5c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000004 	.word	0x20000004
 8000f04:	2000000c 	.word	0x2000000c
 8000f08:	20000008 	.word	0x20000008

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	2000000c 	.word	0x2000000c
 8000f30:	20000564 	.word	0x20000564

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000564 	.word	0x20000564

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff ffee 	bl	8000f34 <HAL_GetTick>
 8000f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f64:	d005      	beq.n	8000f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_Delay+0x44>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f72:	bf00      	nop
 8000f74:	f7ff ffde 	bl	8000f34 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8f7      	bhi.n	8000f74 <HAL_Delay+0x28>
  {
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000000c 	.word	0x2000000c

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00
 8000fd8:	05fa0000 	.word	0x05fa0000

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c4:	d301      	bcc.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00f      	b.n	80010ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <SysTick_Config+0x40>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	210f      	movs	r1, #15
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f7ff ff8e 	bl	8000ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <SysTick_Config+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <SysTick_Config+0x40>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff47 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001120:	f7ff ff5c 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	6978      	ldr	r0, [r7, #20]
 800112c:	f7ff ff8e 	bl	800104c <NVIC_EncodePriority>
 8001130:	4602      	mov	r2, r0
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff5d 	bl	8000ff8 <__NVIC_SetPriority>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffb0 	bl	80010b4 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001170:	4ba9      	ldr	r3, [pc, #676]	; (8001418 <HAL_ETH_Init+0x2b8>)
 8001172:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e181      	b.n	800148a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d106      	bne.n	80011a0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fa00 	bl	80005a0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a0:	4b9e      	ldr	r3, [pc, #632]	; (800141c <HAL_ETH_Init+0x2bc>)
 80011a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a4:	4a9d      	ldr	r2, [pc, #628]	; (800141c <HAL_ETH_Init+0x2bc>)
 80011a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011aa:	6453      	str	r3, [r2, #68]	; 0x44
 80011ac:	4b9b      	ldr	r3, [pc, #620]	; (800141c <HAL_ETH_Init+0x2bc>)
 80011ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011b8:	4b99      	ldr	r3, [pc, #612]	; (8001420 <HAL_ETH_Init+0x2c0>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4a98      	ldr	r2, [pc, #608]	; (8001420 <HAL_ETH_Init+0x2c0>)
 80011be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011c2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011c4:	4b96      	ldr	r3, [pc, #600]	; (8001420 <HAL_ETH_Init+0x2c0>)
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4994      	ldr	r1, [pc, #592]	; (8001420 <HAL_ETH_Init+0x2c0>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f042 0201 	orr.w	r2, r2, #1
 80011e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011ea:	f7ff fea3 	bl	8000f34 <HAL_GetTick>
 80011ee:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011f0:	e011      	b.n	8001216 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80011f2:	f7ff fe9f 	bl	8000f34 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001200:	d909      	bls.n	8001216 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2203      	movs	r2, #3
 8001206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e139      	b.n	800148a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e4      	bne.n	80011f2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f023 031c 	bic.w	r3, r3, #28
 8001236:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001238:	f001 fba4 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 800123c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4a78      	ldr	r2, [pc, #480]	; (8001424 <HAL_ETH_Init+0x2c4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d908      	bls.n	8001258 <HAL_ETH_Init+0xf8>
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4a77      	ldr	r2, [pc, #476]	; (8001428 <HAL_ETH_Init+0x2c8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d804      	bhi.n	8001258 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	f043 0308 	orr.w	r3, r3, #8
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	e027      	b.n	80012a8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	4a73      	ldr	r2, [pc, #460]	; (8001428 <HAL_ETH_Init+0x2c8>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d908      	bls.n	8001272 <HAL_ETH_Init+0x112>
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	4a6d      	ldr	r2, [pc, #436]	; (8001418 <HAL_ETH_Init+0x2b8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d204      	bcs.n	8001272 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f043 030c 	orr.w	r3, r3, #12
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	e01a      	b.n	80012a8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4a68      	ldr	r2, [pc, #416]	; (8001418 <HAL_ETH_Init+0x2b8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d303      	bcc.n	8001282 <HAL_ETH_Init+0x122>
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4a6b      	ldr	r2, [pc, #428]	; (800142c <HAL_ETH_Init+0x2cc>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d911      	bls.n	80012a6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	4a69      	ldr	r2, [pc, #420]	; (800142c <HAL_ETH_Init+0x2cc>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d908      	bls.n	800129c <HAL_ETH_Init+0x13c>
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4a68      	ldr	r2, [pc, #416]	; (8001430 <HAL_ETH_Init+0x2d0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d804      	bhi.n	800129c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	e005      	b.n	80012a8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f043 0310 	orr.w	r3, r3, #16
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	e000      	b.n	80012a8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80012a6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80012b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012b4:	2100      	movs	r1, #0
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f954 	bl	8001564 <HAL_ETH_WritePHYRegister>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00b      	beq.n	80012da <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80012c6:	6939      	ldr	r1, [r7, #16]
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f9b1 	bl	8001630 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e0d7      	b.n	800148a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80012da:	20ff      	movs	r0, #255	; 0xff
 80012dc:	f7ff fe36 	bl	8000f4c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a5 	beq.w	8001434 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012ea:	f7ff fe23 	bl	8000f34 <HAL_GetTick>
 80012ee:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	461a      	mov	r2, r3
 80012f6:	2101      	movs	r1, #1
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 f8cb 	bl	8001494 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012fe:	f7ff fe19 	bl	8000f34 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	f241 3288 	movw	r2, #5000	; 0x1388
 800130c:	4293      	cmp	r3, r2
 800130e:	d90f      	bls.n	8001330 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001314:	6939      	ldr	r1, [r7, #16]
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 f98a 	bl	8001630 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e0ac      	b.n	800148a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0da      	beq.n	80012f0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800133a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800133e:	2100      	movs	r1, #0
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f90f 	bl	8001564 <HAL_ETH_WritePHYRegister>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00b      	beq.n	8001364 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001350:	6939      	ldr	r1, [r7, #16]
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f96c 	bl	8001630 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001360:	2301      	movs	r3, #1
 8001362:	e092      	b.n	800148a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001364:	f7ff fde6 	bl	8000f34 <HAL_GetTick>
 8001368:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	461a      	mov	r2, r3
 8001370:	2101      	movs	r1, #1
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 f88e 	bl	8001494 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001378:	f7ff fddc 	bl	8000f34 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	f241 3288 	movw	r2, #5000	; 0x1388
 8001386:	4293      	cmp	r3, r2
 8001388:	d90f      	bls.n	80013aa <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800138e:	6939      	ldr	r1, [r7, #16]
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f94d 	bl	8001630 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e06f      	b.n	800148a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0da      	beq.n	800136a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	461a      	mov	r2, r3
 80013ba:	2110      	movs	r1, #16
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f869 	bl	8001494 <HAL_ETH_ReadPHYRegister>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00b      	beq.n	80013e0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013cc:	6939      	ldr	r1, [r7, #16]
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f92e 	bl	8001630 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013dc:	2301      	movs	r3, #1
 80013de:	e054      	b.n	800148a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	e002      	b.n	80013fa <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	e035      	b.n	8001478 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	e030      	b.n	8001478 <HAL_ETH_Init+0x318>
 8001416:	bf00      	nop
 8001418:	03938700 	.word	0x03938700
 800141c:	40023800 	.word	0x40023800
 8001420:	40013800 	.word	0x40013800
 8001424:	01312cff 	.word	0x01312cff
 8001428:	02160ebf 	.word	0x02160ebf
 800142c:	05f5e0ff 	.word	0x05f5e0ff
 8001430:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	085b      	lsrs	r3, r3, #1
 8001442:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001444:	4313      	orrs	r3, r2
 8001446:	b29b      	uxth	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	2100      	movs	r1, #0
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f889 	bl	8001564 <HAL_ETH_WritePHYRegister>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00b      	beq.n	8001470 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800145c:	6939      	ldr	r1, [r7, #16]
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f8e6 	bl	8001630 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e00c      	b.n	800148a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001470:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001474:	f7ff fd6a 	bl	8000f4c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001478:	6939      	ldr	r1, [r7, #16]
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f8d8 	bl	8001630 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop

08001494 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	460b      	mov	r3, r1
 800149e:	607a      	str	r2, [r7, #4]
 80014a0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b82      	cmp	r3, #130	; 0x82
 80014b4:	d101      	bne.n	80014ba <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80014b6:	2302      	movs	r3, #2
 80014b8:	e050      	b.n	800155c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2282      	movs	r2, #130	; 0x82
 80014be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f003 031c 	and.w	r3, r3, #28
 80014d0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8a1b      	ldrh	r3, [r3, #16]
 80014d6:	02db      	lsls	r3, r3, #11
 80014d8:	b29b      	uxth	r3, r3
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4313      	orrs	r3, r2
 80014de:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80014e0:	897b      	ldrh	r3, [r7, #10]
 80014e2:	019b      	lsls	r3, r3, #6
 80014e4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f023 0302 	bic.w	r3, r3, #2
 80014f4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001506:	f7ff fd15 	bl	8000f34 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800150c:	e015      	b.n	800153a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800150e:	f7ff fd11 	bl	8000f34 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d309      	bcc.n	8001532 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e014      	b.n	800155c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1e4      	bne.n	800150e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	b29b      	uxth	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	460b      	mov	r3, r1
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b42      	cmp	r3, #66	; 0x42
 8001584:	d101      	bne.n	800158a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001586:	2302      	movs	r3, #2
 8001588:	e04e      	b.n	8001628 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2242      	movs	r2, #66	; 0x42
 800158e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f003 031c 	and.w	r3, r3, #28
 80015a0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8a1b      	ldrh	r3, [r3, #16]
 80015a6:	02db      	lsls	r3, r3, #11
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80015b0:	897b      	ldrh	r3, [r7, #10]
 80015b2:	019b      	lsls	r3, r3, #6
 80015b4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015e0:	f7ff fca8 	bl	8000f34 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015e6:	e015      	b.n	8001614 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80015e8:	f7ff fca4 	bl	8000f34 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f6:	d309      	bcc.n	800160c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e00d      	b.n	8001628 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1e4      	bne.n	80015e8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0b0      	sub	sp, #192	; 0xc0
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d007      	beq.n	8001656 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800164c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001654:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800165e:	2300      	movs	r3, #0
 8001660:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d103      	bne.n	800167e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167a:	663b      	str	r3, [r7, #96]	; 0x60
 800167c:	e001      	b.n	8001682 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001686:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800168c:	2300      	movs	r3, #0
 800168e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800169c:	2340      	movs	r3, #64	; 0x40
 800169e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001704:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001708:	4bab      	ldr	r3, [pc, #684]	; (80019b8 <ETH_MACDMAConfig+0x388>)
 800170a:	4013      	ands	r3, r2
 800170c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001710:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001714:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001718:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800171a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800171c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001722:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001726:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800172a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001730:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001734:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001738:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800173a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800173c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800173e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001740:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001744:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001746:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800174a:	4313      	orrs	r3, r2
 800174c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001758:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fbf1 	bl	8000f4c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001772:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001774:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001778:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800177a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800177c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800177e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001782:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001788:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800178a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800178e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001794:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001798:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80017a0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80017a2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ae:	2001      	movs	r0, #1
 80017b0:	f7ff fbcc 	bl	8000f4c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017bc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80017c6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80017d0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80017dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017e0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80017e4:	4013      	ands	r3, r2
 80017e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80017ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017ee:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80017f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80017f4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80017f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80017fa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80017fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001800:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001806:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001808:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800180c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800180e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001812:	4313      	orrs	r3, r2
 8001814:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001820:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800182c:	2001      	movs	r0, #1
 800182e:	f7ff fb8d 	bl	8000f4c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800183a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800183c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001840:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001856:	2001      	movs	r0, #1
 8001858:	f7ff fb78 	bl	8000f4c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001864:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800186a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800186e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001874:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001878:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800188a:	2304      	movs	r3, #4
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800188e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800189a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	f241 0318 	movw	r3, #4120	; 0x1018
 80018ba:	4413      	add	r3, r2
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80018c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <ETH_MACDMAConfig+0x38c>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80018ce:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80018d0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80018d2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80018d4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80018d6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80018d8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80018da:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80018dc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80018de:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80018e0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80018e2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80018e4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80018e6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80018ea:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80018ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80018ee:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80018f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018f4:	4313      	orrs	r3, r2
 80018f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	f241 0318 	movw	r3, #4120	; 0x1018
 8001902:	4413      	add	r3, r2
 8001904:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001908:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001912:	4413      	add	r3, r2
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800191a:	2001      	movs	r0, #1
 800191c:	f7ff fb16 	bl	8000f4c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	f241 0318 	movw	r3, #4120	; 0x1018
 8001928:	4413      	add	r3, r2
 800192a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800192e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001934:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001938:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800193a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800193c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800193e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001940:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001944:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001946:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800194a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001958:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff faef 	bl	8000f4c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001976:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800197a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10d      	bne.n	80019a0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	f241 031c 	movw	r3, #4124	; 0x101c
 800198c:	4413      	add	r3, r2
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6811      	ldr	r1, [r2, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <ETH_MACDMAConfig+0x390>)
 8001996:	431a      	orrs	r2, r3
 8001998:	f241 031c 	movw	r3, #4124	; 0x101c
 800199c:	440b      	add	r3, r1
 800199e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	461a      	mov	r2, r3
 80019a6:	2100      	movs	r1, #0
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f80b 	bl	80019c4 <ETH_MACAddressConfig>
}
 80019ae:	bf00      	nop
 80019b0:	37c0      	adds	r7, #192	; 0xc0
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	ff20810f 	.word	0xff20810f
 80019bc:	f8de3f23 	.word	0xf8de3f23
 80019c0:	00010040 	.word	0x00010040

080019c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3305      	adds	r3, #5
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	3204      	adds	r2, #4
 80019dc:	7812      	ldrb	r2, [r2, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <ETH_MACAddressConfig+0x68>)
 80019e6:	4413      	add	r3, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3303      	adds	r3, #3
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	061a      	lsls	r2, r3, #24
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3302      	adds	r3, #2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	041b      	lsls	r3, r3, #16
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3301      	adds	r3, #1
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	7812      	ldrb	r2, [r2, #0]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <ETH_MACAddressConfig+0x6c>)
 8001a16:	4413      	add	r3, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	6013      	str	r3, [r2, #0]
}
 8001a1e:	bf00      	nop
 8001a20:	371c      	adds	r7, #28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40028040 	.word	0x40028040
 8001a30:	40028044 	.word	0x40028044

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	e175      	b.n	8001d40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 8164 	bne.w	8001d3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d00b      	beq.n	8001a92 <HAL_GPIO_Init+0x5e>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a86:	2b11      	cmp	r3, #17
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b12      	cmp	r3, #18
 8001a90:	d130      	bne.n	8001af4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 0201 	and.w	r2, r3, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x100>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b12      	cmp	r3, #18
 8001b32:	d123      	bne.n	8001b7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	08da      	lsrs	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3208      	adds	r2, #8
 8001b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	69b9      	ldr	r1, [r7, #24]
 8001b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80be 	beq.w	8001d3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <HAL_GPIO_Init+0x324>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a65      	ldr	r2, [pc, #404]	; (8001d58 <HAL_GPIO_Init+0x324>)
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b63      	ldr	r3, [pc, #396]	; (8001d58 <HAL_GPIO_Init+0x324>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bd6:	4a61      	ldr	r2, [pc, #388]	; (8001d5c <HAL_GPIO_Init+0x328>)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	3302      	adds	r3, #2
 8001bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	220f      	movs	r2, #15
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <HAL_GPIO_Init+0x32c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d037      	beq.n	8001c72 <HAL_GPIO_Init+0x23e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a57      	ldr	r2, [pc, #348]	; (8001d64 <HAL_GPIO_Init+0x330>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d031      	beq.n	8001c6e <HAL_GPIO_Init+0x23a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a56      	ldr	r2, [pc, #344]	; (8001d68 <HAL_GPIO_Init+0x334>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d02b      	beq.n	8001c6a <HAL_GPIO_Init+0x236>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a55      	ldr	r2, [pc, #340]	; (8001d6c <HAL_GPIO_Init+0x338>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d025      	beq.n	8001c66 <HAL_GPIO_Init+0x232>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a54      	ldr	r2, [pc, #336]	; (8001d70 <HAL_GPIO_Init+0x33c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d01f      	beq.n	8001c62 <HAL_GPIO_Init+0x22e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a53      	ldr	r2, [pc, #332]	; (8001d74 <HAL_GPIO_Init+0x340>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d019      	beq.n	8001c5e <HAL_GPIO_Init+0x22a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <HAL_GPIO_Init+0x344>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d013      	beq.n	8001c5a <HAL_GPIO_Init+0x226>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a51      	ldr	r2, [pc, #324]	; (8001d7c <HAL_GPIO_Init+0x348>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00d      	beq.n	8001c56 <HAL_GPIO_Init+0x222>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a50      	ldr	r2, [pc, #320]	; (8001d80 <HAL_GPIO_Init+0x34c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d007      	beq.n	8001c52 <HAL_GPIO_Init+0x21e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4f      	ldr	r2, [pc, #316]	; (8001d84 <HAL_GPIO_Init+0x350>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d101      	bne.n	8001c4e <HAL_GPIO_Init+0x21a>
 8001c4a:	2309      	movs	r3, #9
 8001c4c:	e012      	b.n	8001c74 <HAL_GPIO_Init+0x240>
 8001c4e:	230a      	movs	r3, #10
 8001c50:	e010      	b.n	8001c74 <HAL_GPIO_Init+0x240>
 8001c52:	2308      	movs	r3, #8
 8001c54:	e00e      	b.n	8001c74 <HAL_GPIO_Init+0x240>
 8001c56:	2307      	movs	r3, #7
 8001c58:	e00c      	b.n	8001c74 <HAL_GPIO_Init+0x240>
 8001c5a:	2306      	movs	r3, #6
 8001c5c:	e00a      	b.n	8001c74 <HAL_GPIO_Init+0x240>
 8001c5e:	2305      	movs	r3, #5
 8001c60:	e008      	b.n	8001c74 <HAL_GPIO_Init+0x240>
 8001c62:	2304      	movs	r3, #4
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x240>
 8001c66:	2303      	movs	r3, #3
 8001c68:	e004      	b.n	8001c74 <HAL_GPIO_Init+0x240>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e002      	b.n	8001c74 <HAL_GPIO_Init+0x240>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_GPIO_Init+0x240>
 8001c72:	2300      	movs	r3, #0
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	f002 0203 	and.w	r2, r2, #3
 8001c7a:	0092      	lsls	r2, r2, #2
 8001c7c:	4093      	lsls	r3, r2
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c84:	4935      	ldr	r1, [pc, #212]	; (8001d5c <HAL_GPIO_Init+0x328>)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <HAL_GPIO_Init+0x354>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb6:	4a34      	ldr	r2, [pc, #208]	; (8001d88 <HAL_GPIO_Init+0x354>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cbc:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <HAL_GPIO_Init+0x354>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce0:	4a29      	ldr	r2, [pc, #164]	; (8001d88 <HAL_GPIO_Init+0x354>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <HAL_GPIO_Init+0x354>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_GPIO_Init+0x354>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_GPIO_Init+0x354>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <HAL_GPIO_Init+0x354>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b0f      	cmp	r3, #15
 8001d44:	f67f ae86 	bls.w	8001a54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3724      	adds	r7, #36	; 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40013800 	.word	0x40013800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020c00 	.word	0x40020c00
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40021400 	.word	0x40021400
 8001d78:	40021800 	.word	0x40021800
 8001d7c:	40021c00 	.word	0x40021c00
 8001d80:	40022000 	.word	0x40022000
 8001d84:	40022400 	.word	0x40022400
 8001d88:	40013c00 	.word	0x40013c00

08001d8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e001      	b.n	8001dae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dd8:	e003      	b.n	8001de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df0:	b08f      	sub	sp, #60	; 0x3c
 8001df2:	af0a      	add	r7, sp, #40	; 0x28
 8001df4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e116      	b.n	800202e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe ffb4 	bl	8000d88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2203      	movs	r2, #3
 8001e24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f002 f998 	bl	8004174 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	687e      	ldr	r6, [r7, #4]
 8001e4c:	466d      	mov	r5, sp
 8001e4e:	f106 0410 	add.w	r4, r6, #16
 8001e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e62:	1d33      	adds	r3, r6, #4
 8001e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e66:	6838      	ldr	r0, [r7, #0]
 8001e68:	f002 f92c 	bl	80040c4 <USB_CoreInit>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0d7      	b.n	800202e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 f986 	bl	8004196 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	e04a      	b.n	8001f26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	333d      	adds	r3, #61	; 0x3d
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	333c      	adds	r3, #60	; 0x3c
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	b298      	uxth	r0, r3
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	3342      	adds	r3, #66	; 0x42
 8001ecc:	4602      	mov	r2, r0
 8001ece:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	333f      	adds	r3, #63	; 0x3f
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	1a9b      	subs	r3, r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3344      	adds	r3, #68	; 0x44
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	3348      	adds	r3, #72	; 0x48
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	3350      	adds	r3, #80	; 0x50
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	3301      	adds	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3af      	bcc.n	8001e90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	e044      	b.n	8001fc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d3b5      	bcc.n	8001f36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	687e      	ldr	r6, [r7, #4]
 8001fd2:	466d      	mov	r5, sp
 8001fd4:	f106 0410 	add.w	r4, r6, #16
 8001fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fe4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fe8:	1d33      	adds	r3, r6, #4
 8001fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fec:	6838      	ldr	r0, [r7, #0]
 8001fee:	f002 f8fd 	bl	80041ec <USB_DevInit>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e014      	b.n	800202e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	2b01      	cmp	r3, #1
 800201a:	d102      	bne.n	8002022 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f80b 	bl	8002038 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f002 faaf 	bl	800458a <USB_DevDisconnect>

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002038 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_PCDEx_ActivateLPM+0x44>)
 8002068:	4313      	orrs	r3, r2
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	10000003 	.word	0x10000003

08002080 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40007000 	.word	0x40007000

080020a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e291      	b.n	80025da <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8087 	beq.w	80021d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c4:	4b96      	ldr	r3, [pc, #600]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d00c      	beq.n	80020ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d0:	4b93      	ldr	r3, [pc, #588]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d112      	bne.n	8002102 <HAL_RCC_OscConfig+0x62>
 80020dc:	4b90      	ldr	r3, [pc, #576]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e8:	d10b      	bne.n	8002102 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ea:	4b8d      	ldr	r3, [pc, #564]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d06c      	beq.n	80021d0 <HAL_RCC_OscConfig+0x130>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d168      	bne.n	80021d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e26b      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x7a>
 800210c:	4b84      	ldr	r3, [pc, #528]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a83      	ldr	r2, [pc, #524]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	e02e      	b.n	8002178 <HAL_RCC_OscConfig+0xd8>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x9c>
 8002122:	4b7f      	ldr	r3, [pc, #508]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7e      	ldr	r2, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b7c      	ldr	r3, [pc, #496]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a7b      	ldr	r2, [pc, #492]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e01d      	b.n	8002178 <HAL_RCC_OscConfig+0xd8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0xc0>
 8002146:	4b76      	ldr	r3, [pc, #472]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a75      	ldr	r2, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 800214c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b73      	ldr	r3, [pc, #460]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a72      	ldr	r2, [pc, #456]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e00b      	b.n	8002178 <HAL_RCC_OscConfig+0xd8>
 8002160:	4b6f      	ldr	r3, [pc, #444]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a6e      	ldr	r2, [pc, #440]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b6c      	ldr	r3, [pc, #432]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a6b      	ldr	r2, [pc, #428]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7fe fed8 	bl	8000f34 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7fe fed4 	bl	8000f34 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e21f      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	4b61      	ldr	r3, [pc, #388]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0xe8>
 80021a6:	e014      	b.n	80021d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fec4 	bl	8000f34 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7fe fec0 	bl	8000f34 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e20b      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	4b57      	ldr	r3, [pc, #348]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x110>
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d069      	beq.n	80022b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021de:	4b50      	ldr	r3, [pc, #320]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00b      	beq.n	8002202 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ea:	4b4d      	ldr	r3, [pc, #308]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d11c      	bne.n	8002230 <HAL_RCC_OscConfig+0x190>
 80021f6:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d116      	bne.n	8002230 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_RCC_OscConfig+0x17a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d001      	beq.n	800221a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e1df      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221a:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	493d      	ldr	r1, [pc, #244]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	e040      	b.n	80022b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d023      	beq.n	8002280 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002238:	4b39      	ldr	r3, [pc, #228]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a38      	ldr	r2, [pc, #224]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe fe76 	bl	8000f34 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224c:	f7fe fe72 	bl	8000f34 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1bd      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225e:	4b30      	ldr	r3, [pc, #192]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226a:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4929      	ldr	r1, [pc, #164]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
 800227e:	e018      	b.n	80022b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002280:	4b27      	ldr	r3, [pc, #156]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a26      	ldr	r2, [pc, #152]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe fe52 	bl	8000f34 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7fe fe4e 	bl	8000f34 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e199      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d038      	beq.n	8002330 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d019      	beq.n	80022fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c6:	4b16      	ldr	r3, [pc, #88]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 80022c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ca:	4a15      	ldr	r2, [pc, #84]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7fe fe2f 	bl	8000f34 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022da:	f7fe fe2b 	bl	8000f34 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e176      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 80022ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x23a>
 80022f8:	e01a      	b.n	8002330 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 80022fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fe:	4a08      	ldr	r2, [pc, #32]	; (8002320 <HAL_RCC_OscConfig+0x280>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002306:	f7fe fe15 	bl	8000f34 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230e:	f7fe fe11 	bl	8000f34 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d903      	bls.n	8002324 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e15c      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
 8002320:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002324:	4b91      	ldr	r3, [pc, #580]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 8002326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1ee      	bne.n	800230e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80a4 	beq.w	8002486 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233e:	4b8b      	ldr	r3, [pc, #556]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10d      	bne.n	8002366 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b88      	ldr	r3, [pc, #544]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4a87      	ldr	r2, [pc, #540]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
 8002356:	4b85      	ldr	r3, [pc, #532]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002362:	2301      	movs	r3, #1
 8002364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002366:	4b82      	ldr	r3, [pc, #520]	; (8002570 <HAL_RCC_OscConfig+0x4d0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d118      	bne.n	80023a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002372:	4b7f      	ldr	r3, [pc, #508]	; (8002570 <HAL_RCC_OscConfig+0x4d0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a7e      	ldr	r2, [pc, #504]	; (8002570 <HAL_RCC_OscConfig+0x4d0>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237e:	f7fe fdd9 	bl	8000f34 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002386:	f7fe fdd5 	bl	8000f34 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b64      	cmp	r3, #100	; 0x64
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e120      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002398:	4b75      	ldr	r3, [pc, #468]	; (8002570 <HAL_RCC_OscConfig+0x4d0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x31a>
 80023ac:	4b6f      	ldr	r3, [pc, #444]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	4a6e      	ldr	r2, [pc, #440]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6713      	str	r3, [r2, #112]	; 0x70
 80023b8:	e02d      	b.n	8002416 <HAL_RCC_OscConfig+0x376>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x33c>
 80023c2:	4b6a      	ldr	r3, [pc, #424]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	4a69      	ldr	r2, [pc, #420]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6713      	str	r3, [r2, #112]	; 0x70
 80023ce:	4b67      	ldr	r3, [pc, #412]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	4a66      	ldr	r2, [pc, #408]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	6713      	str	r3, [r2, #112]	; 0x70
 80023da:	e01c      	b.n	8002416 <HAL_RCC_OscConfig+0x376>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0x35e>
 80023e4:	4b61      	ldr	r3, [pc, #388]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	4a60      	ldr	r2, [pc, #384]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	6713      	str	r3, [r2, #112]	; 0x70
 80023f0:	4b5e      	ldr	r3, [pc, #376]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4a5d      	ldr	r2, [pc, #372]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6713      	str	r3, [r2, #112]	; 0x70
 80023fc:	e00b      	b.n	8002416 <HAL_RCC_OscConfig+0x376>
 80023fe:	4b5b      	ldr	r3, [pc, #364]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	4a5a      	ldr	r2, [pc, #360]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6713      	str	r3, [r2, #112]	; 0x70
 800240a:	4b58      	ldr	r3, [pc, #352]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	4a57      	ldr	r2, [pc, #348]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d015      	beq.n	800244a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241e:	f7fe fd89 	bl	8000f34 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe fd85 	bl	8000f34 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0ce      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	4b4b      	ldr	r3, [pc, #300]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ee      	beq.n	8002426 <HAL_RCC_OscConfig+0x386>
 8002448:	e014      	b.n	8002474 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7fe fd73 	bl	8000f34 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fd6f 	bl	8000f34 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0b8      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	4b40      	ldr	r3, [pc, #256]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ee      	bne.n	8002452 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247a:	4b3c      	ldr	r3, [pc, #240]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a3b      	ldr	r2, [pc, #236]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 8002480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80a4 	beq.w	80025d8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002490:	4b36      	ldr	r3, [pc, #216]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b08      	cmp	r3, #8
 800249a:	d06b      	beq.n	8002574 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d149      	bne.n	8002538 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a4:	4b31      	ldr	r3, [pc, #196]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a30      	ldr	r2, [pc, #192]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80024aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe fd40 	bl	8000f34 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b8:	f7fe fd3c 	bl	8000f34 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e087      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69da      	ldr	r2, [r3, #28]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	019b      	lsls	r3, r3, #6
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ec:	085b      	lsrs	r3, r3, #1
 80024ee:	3b01      	subs	r3, #1
 80024f0:	041b      	lsls	r3, r3, #16
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	4313      	orrs	r3, r2
 80024fc:	4a1b      	ldr	r2, [pc, #108]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 80024fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002502:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a18      	ldr	r2, [pc, #96]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800250a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe fd10 	bl	8000f34 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002518:	f7fe fd0c 	bl	8000f34 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e057      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x478>
 8002536:	e04f      	b.n	80025d8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0b      	ldr	r2, [pc, #44]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 800253e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe fcf6 	bl	8000f34 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe fcf2 	bl	8000f34 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e03d      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	4b03      	ldr	r3, [pc, #12]	; (800256c <HAL_RCC_OscConfig+0x4cc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x4ac>
 800256a:	e035      	b.n	80025d8 <HAL_RCC_OscConfig+0x538>
 800256c:	40023800 	.word	0x40023800
 8002570:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x544>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d028      	beq.n	80025d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d121      	bne.n	80025d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d11a      	bne.n	80025d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025a4:	4013      	ands	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d111      	bne.n	80025d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	085b      	lsrs	r3, r3, #1
 80025bc:	3b01      	subs	r3, #1
 80025be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800

080025e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0d0      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002600:	4b6a      	ldr	r3, [pc, #424]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d910      	bls.n	8002630 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b67      	ldr	r3, [pc, #412]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 020f 	bic.w	r2, r3, #15
 8002616:	4965      	ldr	r1, [pc, #404]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b63      	ldr	r3, [pc, #396]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0b8      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002648:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	4a58      	ldr	r2, [pc, #352]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 800264e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002652:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002660:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4a52      	ldr	r2, [pc, #328]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800266a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266c:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	494d      	ldr	r1, [pc, #308]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d040      	beq.n	800270c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d115      	bne.n	80026ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e07f      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e073      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e06b      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ca:	4b39      	ldr	r3, [pc, #228]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f023 0203 	bic.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4936      	ldr	r1, [pc, #216]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026dc:	f7fe fc2a 	bl	8000f34 <HAL_GetTick>
 80026e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e4:	f7fe fc26 	bl	8000f34 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e053      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 020c 	and.w	r2, r3, #12
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	429a      	cmp	r2, r3
 800270a:	d1eb      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d210      	bcs.n	800273c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 020f 	bic.w	r2, r3, #15
 8002722:	4922      	ldr	r1, [pc, #136]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e032      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4916      	ldr	r1, [pc, #88]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	490e      	ldr	r1, [pc, #56]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277a:	f000 f821 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 800277e:	4602      	mov	r2, r0
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	490a      	ldr	r1, [pc, #40]	; (80027b4 <HAL_RCC_ClockConfig+0x1cc>)
 800278c:	5ccb      	ldrb	r3, [r1, r3]
 800278e:	fa22 f303 	lsr.w	r3, r2, r3
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1d4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fb86 	bl	8000eac <HAL_InitTick>

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023c00 	.word	0x40023c00
 80027b0:	40023800 	.word	0x40023800
 80027b4:	080046a4 	.word	0x080046a4
 80027b8:	20000004 	.word	0x20000004
 80027bc:	20000008 	.word	0x20000008

080027c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	2300      	movs	r3, #0
 80027d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d8:	4b67      	ldr	r3, [pc, #412]	; (8002978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d00d      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x40>
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	f200 80bd 	bhi.w	8002964 <HAL_RCC_GetSysClockFreq+0x1a4>
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x34>
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d003      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x3a>
 80027f2:	e0b7      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f4:	4b61      	ldr	r3, [pc, #388]	; (800297c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027f6:	60bb      	str	r3, [r7, #8]
      break;
 80027f8:	e0b7      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027fa:	4b61      	ldr	r3, [pc, #388]	; (8002980 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80027fc:	60bb      	str	r3, [r7, #8]
      break;
 80027fe:	e0b4      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002800:	4b5d      	ldr	r3, [pc, #372]	; (8002978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002808:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800280a:	4b5b      	ldr	r3, [pc, #364]	; (8002978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d04d      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002816:	4b58      	ldr	r3, [pc, #352]	; (8002978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	099b      	lsrs	r3, r3, #6
 800281c:	461a      	mov	r2, r3
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002826:	f04f 0100 	mov.w	r1, #0
 800282a:	ea02 0800 	and.w	r8, r2, r0
 800282e:	ea03 0901 	and.w	r9, r3, r1
 8002832:	4640      	mov	r0, r8
 8002834:	4649      	mov	r1, r9
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	014b      	lsls	r3, r1, #5
 8002840:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002844:	0142      	lsls	r2, r0, #5
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	ebb0 0008 	subs.w	r0, r0, r8
 800284e:	eb61 0109 	sbc.w	r1, r1, r9
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	018b      	lsls	r3, r1, #6
 800285c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002860:	0182      	lsls	r2, r0, #6
 8002862:	1a12      	subs	r2, r2, r0
 8002864:	eb63 0301 	sbc.w	r3, r3, r1
 8002868:	f04f 0000 	mov.w	r0, #0
 800286c:	f04f 0100 	mov.w	r1, #0
 8002870:	00d9      	lsls	r1, r3, #3
 8002872:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002876:	00d0      	lsls	r0, r2, #3
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	eb12 0208 	adds.w	r2, r2, r8
 8002880:	eb43 0309 	adc.w	r3, r3, r9
 8002884:	f04f 0000 	mov.w	r0, #0
 8002888:	f04f 0100 	mov.w	r1, #0
 800288c:	0259      	lsls	r1, r3, #9
 800288e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002892:	0250      	lsls	r0, r2, #9
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	461a      	mov	r2, r3
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	f7fd fcb0 	bl	8000208 <__aeabi_uldivmod>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4613      	mov	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	e04a      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b2:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	099b      	lsrs	r3, r3, #6
 80028b8:	461a      	mov	r2, r3
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028c2:	f04f 0100 	mov.w	r1, #0
 80028c6:	ea02 0400 	and.w	r4, r2, r0
 80028ca:	ea03 0501 	and.w	r5, r3, r1
 80028ce:	4620      	mov	r0, r4
 80028d0:	4629      	mov	r1, r5
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	014b      	lsls	r3, r1, #5
 80028dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028e0:	0142      	lsls	r2, r0, #5
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	1b00      	subs	r0, r0, r4
 80028e8:	eb61 0105 	sbc.w	r1, r1, r5
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	018b      	lsls	r3, r1, #6
 80028f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028fa:	0182      	lsls	r2, r0, #6
 80028fc:	1a12      	subs	r2, r2, r0
 80028fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002902:	f04f 0000 	mov.w	r0, #0
 8002906:	f04f 0100 	mov.w	r1, #0
 800290a:	00d9      	lsls	r1, r3, #3
 800290c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002910:	00d0      	lsls	r0, r2, #3
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	1912      	adds	r2, r2, r4
 8002918:	eb45 0303 	adc.w	r3, r5, r3
 800291c:	f04f 0000 	mov.w	r0, #0
 8002920:	f04f 0100 	mov.w	r1, #0
 8002924:	0299      	lsls	r1, r3, #10
 8002926:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800292a:	0290      	lsls	r0, r2, #10
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	461a      	mov	r2, r3
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	f7fd fc64 	bl	8000208 <__aeabi_uldivmod>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4613      	mov	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	3301      	adds	r3, #1
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002960:	60bb      	str	r3, [r7, #8]
      break;
 8002962:	e002      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002966:	60bb      	str	r3, [r7, #8]
      break;
 8002968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296a:	68bb      	ldr	r3, [r7, #8]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	00f42400 	.word	0x00f42400
 8002980:	007a1200 	.word	0x007a1200

08002984 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002988:	4b03      	ldr	r3, [pc, #12]	; (8002998 <HAL_RCC_GetHCLKFreq+0x14>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000004 	.word	0x20000004

0800299c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029a0:	f7ff fff0 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	0a9b      	lsrs	r3, r3, #10
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4903      	ldr	r1, [pc, #12]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40023800 	.word	0x40023800
 80029c0:	080046b4 	.word	0x080046b4

080029c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029c8:	f7ff ffdc 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	0b5b      	lsrs	r3, r3, #13
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4903      	ldr	r1, [pc, #12]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40023800 	.word	0x40023800
 80029e8:	080046b4 	.word	0x080046b4

080029ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d012      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a14:	4b69      	ldr	r3, [pc, #420]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a68      	ldr	r2, [pc, #416]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a1e:	6093      	str	r3, [r2, #8]
 8002a20:	4b66      	ldr	r3, [pc, #408]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a28:	4964      	ldr	r1, [pc, #400]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a36:	2301      	movs	r3, #1
 8002a38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d017      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a46:	4b5d      	ldr	r3, [pc, #372]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	4959      	ldr	r1, [pc, #356]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a64:	d101      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d017      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a82:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	494a      	ldr	r1, [pc, #296]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 808b 	beq.w	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ad0:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	4a39      	ldr	r2, [pc, #228]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ada:	6413      	str	r3, [r2, #64]	; 0x40
 8002adc:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ae8:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a34      	ldr	r2, [pc, #208]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af4:	f7fe fa1e 	bl	8000f34 <HAL_GetTick>
 8002af8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afc:	f7fe fa1a 	bl	8000f34 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e357      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b1a:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d035      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d02e      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b38:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a1a      	ldr	r2, [pc, #104]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b5a:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b60:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d114      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe f9e2 	bl	8000f34 <HAL_GetTick>
 8002b70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7fe f9de 	bl	8000f34 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e319      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0ee      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ba2:	d111      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bb2:	400b      	ands	r3, r1
 8002bb4:	4901      	ldr	r1, [pc, #4]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	0ffffcff 	.word	0x0ffffcff
 8002bc8:	4bb1      	ldr	r3, [pc, #708]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4ab0      	ldr	r2, [pc, #704]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bd2:	6093      	str	r3, [r2, #8]
 8002bd4:	4bae      	ldr	r3, [pc, #696]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be0:	49ab      	ldr	r1, [pc, #684]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d010      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bf2:	4ba7      	ldr	r3, [pc, #668]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bf8:	4aa5      	ldr	r2, [pc, #660]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c02:	4ba3      	ldr	r3, [pc, #652]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	49a0      	ldr	r1, [pc, #640]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c20:	4b9b      	ldr	r3, [pc, #620]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c2e:	4998      	ldr	r1, [pc, #608]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c42:	4b93      	ldr	r3, [pc, #588]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c50:	498f      	ldr	r1, [pc, #572]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c64:	4b8a      	ldr	r3, [pc, #552]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c72:	4987      	ldr	r1, [pc, #540]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c86:	4b82      	ldr	r3, [pc, #520]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	497e      	ldr	r1, [pc, #504]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ca8:	4b79      	ldr	r3, [pc, #484]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	4976      	ldr	r1, [pc, #472]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cca:	4b71      	ldr	r3, [pc, #452]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	f023 020c 	bic.w	r2, r3, #12
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd8:	496d      	ldr	r1, [pc, #436]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cec:	4b68      	ldr	r3, [pc, #416]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	4965      	ldr	r1, [pc, #404]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d0e:	4b60      	ldr	r3, [pc, #384]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1c:	495c      	ldr	r1, [pc, #368]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d30:	4b57      	ldr	r3, [pc, #348]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	4954      	ldr	r1, [pc, #336]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d52:	4b4f      	ldr	r3, [pc, #316]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	494b      	ldr	r1, [pc, #300]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d74:	4b46      	ldr	r3, [pc, #280]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d82:	4943      	ldr	r1, [pc, #268]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d96:	4b3e      	ldr	r3, [pc, #248]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da4:	493a      	ldr	r1, [pc, #232]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002db8:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dc6:	4932      	ldr	r1, [pc, #200]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d011      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002dda:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de8:	4929      	ldr	r1, [pc, #164]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002df8:	d101      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e28:	4919      	ldr	r1, [pc, #100]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4c:	4910      	ldr	r1, [pc, #64]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d006      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80d9 	beq.w	800301a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e74:	f7fe f85e 	bl	8000f34 <HAL_GetTick>
 8002e78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e7c:	f7fe f85a 	bl	8000f34 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d904      	bls.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e197      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e94:	4b6c      	ldr	r3, [pc, #432]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ed      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d021      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d11d      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002eb4:	4b64      	ldr	r3, [pc, #400]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eba:	0c1b      	lsrs	r3, r3, #16
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ec2:	4b61      	ldr	r3, [pc, #388]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec8:	0e1b      	lsrs	r3, r3, #24
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	019a      	lsls	r2, r3, #6
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	041b      	lsls	r3, r3, #16
 8002eda:	431a      	orrs	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	061b      	lsls	r3, r3, #24
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	071b      	lsls	r3, r3, #28
 8002ee8:	4957      	ldr	r1, [pc, #348]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d004      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f04:	d00a      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d02e      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f1a:	d129      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f1c:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f22:	0c1b      	lsrs	r3, r3, #16
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f2a:	4b47      	ldr	r3, [pc, #284]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f30:	0f1b      	lsrs	r3, r3, #28
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	019a      	lsls	r2, r3, #6
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	061b      	lsls	r3, r3, #24
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	071b      	lsls	r3, r3, #28
 8002f50:	493d      	ldr	r1, [pc, #244]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f58:	4b3b      	ldr	r3, [pc, #236]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5e:	f023 021f 	bic.w	r2, r3, #31
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	3b01      	subs	r3, #1
 8002f68:	4937      	ldr	r1, [pc, #220]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01d      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f7c:	4b32      	ldr	r3, [pc, #200]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f82:	0e1b      	lsrs	r3, r3, #24
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f8a:	4b2f      	ldr	r3, [pc, #188]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f90:	0f1b      	lsrs	r3, r3, #28
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	019a      	lsls	r2, r3, #6
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	041b      	lsls	r3, r3, #16
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	431a      	orrs	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	071b      	lsls	r3, r3, #28
 8002fb0:	4925      	ldr	r1, [pc, #148]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d011      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	019a      	lsls	r2, r3, #6
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	061b      	lsls	r3, r3, #24
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	071b      	lsls	r3, r3, #28
 8002fe0:	4919      	ldr	r1, [pc, #100]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fe8:	4b17      	ldr	r3, [pc, #92]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a16      	ldr	r2, [pc, #88]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff4:	f7fd ff9e 	bl	8000f34 <HAL_GetTick>
 8002ff8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ffc:	f7fd ff9a 	bl	8000f34 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e0d7      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	2b01      	cmp	r3, #1
 800301e:	f040 80cd 	bne.w	80031bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a08      	ldr	r2, [pc, #32]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302e:	f7fd ff81 	bl	8000f34 <HAL_GetTick>
 8003032:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003034:	e00a      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003036:	f7fd ff7d 	bl	8000f34 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b64      	cmp	r3, #100	; 0x64
 8003042:	d903      	bls.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e0ba      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003048:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800304c:	4b5e      	ldr	r3, [pc, #376]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003058:	d0ed      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003076:	2b00      	cmp	r3, #0
 8003078:	d02e      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d12a      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003082:	4b51      	ldr	r3, [pc, #324]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003090:	4b4d      	ldr	r3, [pc, #308]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	0f1b      	lsrs	r3, r3, #28
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	019a      	lsls	r2, r3, #6
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	061b      	lsls	r3, r3, #24
 80030b0:	431a      	orrs	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	071b      	lsls	r3, r3, #28
 80030b6:	4944      	ldr	r1, [pc, #272]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030be:	4b42      	ldr	r3, [pc, #264]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	3b01      	subs	r3, #1
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	493d      	ldr	r1, [pc, #244]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d022      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ec:	d11d      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030ee:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	0e1b      	lsrs	r3, r3, #24
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030fc:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003102:	0f1b      	lsrs	r3, r3, #28
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	019a      	lsls	r2, r3, #6
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	431a      	orrs	r2, r3
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	061b      	lsls	r3, r3, #24
 800311c:	431a      	orrs	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	071b      	lsls	r3, r3, #28
 8003122:	4929      	ldr	r1, [pc, #164]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d028      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003136:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313c:	0e1b      	lsrs	r3, r3, #24
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003144:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	0c1b      	lsrs	r3, r3, #16
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	019a      	lsls	r2, r3, #6
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	431a      	orrs	r2, r3
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	071b      	lsls	r3, r3, #28
 800316a:	4917      	ldr	r1, [pc, #92]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003178:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	4911      	ldr	r1, [pc, #68]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003188:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003194:	f7fd fece 	bl	8000f34 <HAL_GetTick>
 8003198:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800319c:	f7fd feca 	bl	8000f34 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e007      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031ba:	d1ef      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800

080031cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e09d      	b.n	800331a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d108      	bne.n	80031f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ee:	d009      	beq.n	8003204 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	61da      	str	r2, [r3, #28]
 80031f6:	e005      	b.n	8003204 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd fc4e 	bl	8000ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800323a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003244:	d902      	bls.n	800324c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e002      	b.n	8003252 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800324c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003250:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800325a:	d007      	beq.n	800326c <HAL_SPI_Init+0xa0>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003264:	d002      	beq.n	800326c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	ea42 0103 	orr.w	r1, r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	0c1b      	lsrs	r3, r3, #16
 80032c8:	f003 0204 	and.w	r2, r3, #4
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032e8:	ea42 0103 	orr.w	r1, r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003308:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b088      	sub	sp, #32
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_SPI_Transmit+0x22>
 8003340:	2302      	movs	r3, #2
 8003342:	e158      	b.n	80035f6 <HAL_SPI_Transmit+0x2d4>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800334c:	f7fd fdf2 	bl	8000f34 <HAL_GetTick>
 8003350:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b01      	cmp	r3, #1
 8003360:	d002      	beq.n	8003368 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003362:	2302      	movs	r3, #2
 8003364:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003366:	e13d      	b.n	80035e4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_SPI_Transmit+0x52>
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003378:	e134      	b.n	80035e4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2203      	movs	r2, #3
 800337e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	88fa      	ldrh	r2, [r7, #6]
 8003392:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c4:	d10f      	bne.n	80033e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d007      	beq.n	8003404 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003402:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800340c:	d94b      	bls.n	80034a6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_SPI_Transmit+0xfa>
 8003416:	8afb      	ldrh	r3, [r7, #22]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d13e      	bne.n	800349a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	881a      	ldrh	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	1c9a      	adds	r2, r3, #2
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003440:	e02b      	b.n	800349a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b02      	cmp	r3, #2
 800344e:	d112      	bne.n	8003476 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	881a      	ldrh	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	1c9a      	adds	r2, r3, #2
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003474:	e011      	b.n	800349a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003476:	f7fd fd5d 	bl	8000f34 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d803      	bhi.n	800348e <HAL_SPI_Transmit+0x16c>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d102      	bne.n	8003494 <HAL_SPI_Transmit+0x172>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d102      	bne.n	800349a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003498:	e0a4      	b.n	80035e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ce      	bne.n	8003442 <HAL_SPI_Transmit+0x120>
 80034a4:	e07c      	b.n	80035a0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_SPI_Transmit+0x192>
 80034ae:	8afb      	ldrh	r3, [r7, #22]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d170      	bne.n	8003596 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d912      	bls.n	80034e4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c2:	881a      	ldrh	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	1c9a      	adds	r2, r3, #2
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b02      	subs	r3, #2
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034e2:	e058      	b.n	8003596 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	7812      	ldrb	r2, [r2, #0]
 80034f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800350a:	e044      	b.n	8003596 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b02      	cmp	r3, #2
 8003518:	d12b      	bne.n	8003572 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d912      	bls.n	800354a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	881a      	ldrh	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	1c9a      	adds	r2, r3, #2
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b02      	subs	r3, #2
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003548:	e025      	b.n	8003596 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	330c      	adds	r3, #12
 8003554:	7812      	ldrb	r2, [r2, #0]
 8003556:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003570:	e011      	b.n	8003596 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003572:	f7fd fcdf 	bl	8000f34 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d803      	bhi.n	800358a <HAL_SPI_Transmit+0x268>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d102      	bne.n	8003590 <HAL_SPI_Transmit+0x26e>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003594:	e026      	b.n	80035e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1b5      	bne.n	800350c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	6839      	ldr	r1, [r7, #0]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f945 	bl	8003834 <SPI_EndRxTxTransaction>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e000      	b.n	80035e4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80035e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003610:	f7fd fc90 	bl	8000f34 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	4413      	add	r3, r2
 800361e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003620:	f7fd fc88 	bl	8000f34 <HAL_GetTick>
 8003624:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	015b      	lsls	r3, r3, #5
 800362c:	0d1b      	lsrs	r3, r3, #20
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003636:	e054      	b.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363e:	d050      	beq.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003640:	f7fd fc78 	bl	8000f34 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	429a      	cmp	r2, r3
 800364e:	d902      	bls.n	8003656 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d13d      	bne.n	80036d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003664:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800366e:	d111      	bne.n	8003694 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003678:	d004      	beq.n	8003684 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003682:	d107      	bne.n	8003694 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003692:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369c:	d10f      	bne.n	80036be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e017      	b.n	8003702 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	3b01      	subs	r3, #1
 80036e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4013      	ands	r3, r2
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d19b      	bne.n	8003638 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000004 	.word	0x20000004

08003710 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800371e:	f7fd fc09 	bl	8000f34 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	4413      	add	r3, r2
 800372c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800372e:	f7fd fc01 	bl	8000f34 <HAL_GetTick>
 8003732:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003734:	4b3e      	ldr	r3, [pc, #248]	; (8003830 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	00da      	lsls	r2, r3, #3
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	0d1b      	lsrs	r3, r3, #20
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800374c:	e062      	b.n	8003814 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003754:	d109      	bne.n	800376a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003768:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d050      	beq.n	8003814 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003772:	f7fd fbdf 	bl	8000f34 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	429a      	cmp	r2, r3
 8003780:	d902      	bls.n	8003788 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d13d      	bne.n	8003804 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003796:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a0:	d111      	bne.n	80037c6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037aa:	d004      	beq.n	80037b6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b4:	d107      	bne.n	80037c6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ce:	d10f      	bne.n	80037f0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e010      	b.n	8003826 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	3b01      	subs	r3, #1
 8003812:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4013      	ands	r3, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	d194      	bne.n	800374e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000004 	.word	0x20000004

08003834 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2200      	movs	r2, #0
 8003848:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f7ff ff5f 	bl	8003710 <SPI_WaitFifoStateUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d007      	beq.n	8003868 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385c:	f043 0220 	orr.w	r2, r3, #32
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e027      	b.n	80038b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2200      	movs	r2, #0
 8003870:	2180      	movs	r1, #128	; 0x80
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff fec4 	bl	8003600 <SPI_WaitFlagStateUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003882:	f043 0220 	orr.w	r2, r3, #32
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e014      	b.n	80038b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2200      	movs	r2, #0
 8003896:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f7ff ff38 	bl	8003710 <SPI_WaitFifoStateUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038aa:	f043 0220 	orr.w	r2, r3, #32
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e000      	b.n	80038b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e040      	b.n	8003954 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fd f9de 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	; 0x24
 80038ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f82c 	bl	800395c <UART_SetConfig>
 8003904:	4603      	mov	r3, r0
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e022      	b.n	8003954 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa82 	bl	8003e20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800392a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800393a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fb09 	bl	8003f64 <UART_CheckIdleState>
 8003952:	4603      	mov	r3, r0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4ba7      	ldr	r3, [pc, #668]	; (8003c24 <UART_SetConfig+0x2c8>)
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	6979      	ldr	r1, [r7, #20]
 8003990:	430b      	orrs	r3, r1
 8003992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a95      	ldr	r2, [pc, #596]	; (8003c28 <UART_SetConfig+0x2cc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d120      	bne.n	8003a1a <UART_SetConfig+0xbe>
 80039d8:	4b94      	ldr	r3, [pc, #592]	; (8003c2c <UART_SetConfig+0x2d0>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d816      	bhi.n	8003a14 <UART_SetConfig+0xb8>
 80039e6:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <UART_SetConfig+0x90>)
 80039e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ec:	080039fd 	.word	0x080039fd
 80039f0:	08003a09 	.word	0x08003a09
 80039f4:	08003a03 	.word	0x08003a03
 80039f8:	08003a0f 	.word	0x08003a0f
 80039fc:	2301      	movs	r3, #1
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e14f      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003a02:	2302      	movs	r3, #2
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e14c      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003a08:	2304      	movs	r3, #4
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e149      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003a0e:	2308      	movs	r3, #8
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e146      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003a14:	2310      	movs	r3, #16
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e143      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a84      	ldr	r2, [pc, #528]	; (8003c30 <UART_SetConfig+0x2d4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d132      	bne.n	8003a8a <UART_SetConfig+0x12e>
 8003a24:	4b81      	ldr	r3, [pc, #516]	; (8003c2c <UART_SetConfig+0x2d0>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	d828      	bhi.n	8003a84 <UART_SetConfig+0x128>
 8003a32:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <UART_SetConfig+0xdc>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003a6d 	.word	0x08003a6d
 8003a3c:	08003a85 	.word	0x08003a85
 8003a40:	08003a85 	.word	0x08003a85
 8003a44:	08003a85 	.word	0x08003a85
 8003a48:	08003a79 	.word	0x08003a79
 8003a4c:	08003a85 	.word	0x08003a85
 8003a50:	08003a85 	.word	0x08003a85
 8003a54:	08003a85 	.word	0x08003a85
 8003a58:	08003a73 	.word	0x08003a73
 8003a5c:	08003a85 	.word	0x08003a85
 8003a60:	08003a85 	.word	0x08003a85
 8003a64:	08003a85 	.word	0x08003a85
 8003a68:	08003a7f 	.word	0x08003a7f
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e117      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003a72:	2302      	movs	r3, #2
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e114      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e111      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003a7e:	2308      	movs	r3, #8
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e10e      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003a84:	2310      	movs	r3, #16
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e10b      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a69      	ldr	r2, [pc, #420]	; (8003c34 <UART_SetConfig+0x2d8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d120      	bne.n	8003ad6 <UART_SetConfig+0x17a>
 8003a94:	4b65      	ldr	r3, [pc, #404]	; (8003c2c <UART_SetConfig+0x2d0>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a9e:	2b30      	cmp	r3, #48	; 0x30
 8003aa0:	d013      	beq.n	8003aca <UART_SetConfig+0x16e>
 8003aa2:	2b30      	cmp	r3, #48	; 0x30
 8003aa4:	d814      	bhi.n	8003ad0 <UART_SetConfig+0x174>
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d009      	beq.n	8003abe <UART_SetConfig+0x162>
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d810      	bhi.n	8003ad0 <UART_SetConfig+0x174>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <UART_SetConfig+0x15c>
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d006      	beq.n	8003ac4 <UART_SetConfig+0x168>
 8003ab6:	e00b      	b.n	8003ad0 <UART_SetConfig+0x174>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e0f1      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	77fb      	strb	r3, [r7, #31]
 8003ac2:	e0ee      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e0eb      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003aca:	2308      	movs	r3, #8
 8003acc:	77fb      	strb	r3, [r7, #31]
 8003ace:	e0e8      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e0e5      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a57      	ldr	r2, [pc, #348]	; (8003c38 <UART_SetConfig+0x2dc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d120      	bne.n	8003b22 <UART_SetConfig+0x1c6>
 8003ae0:	4b52      	ldr	r3, [pc, #328]	; (8003c2c <UART_SetConfig+0x2d0>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003aea:	2bc0      	cmp	r3, #192	; 0xc0
 8003aec:	d013      	beq.n	8003b16 <UART_SetConfig+0x1ba>
 8003aee:	2bc0      	cmp	r3, #192	; 0xc0
 8003af0:	d814      	bhi.n	8003b1c <UART_SetConfig+0x1c0>
 8003af2:	2b80      	cmp	r3, #128	; 0x80
 8003af4:	d009      	beq.n	8003b0a <UART_SetConfig+0x1ae>
 8003af6:	2b80      	cmp	r3, #128	; 0x80
 8003af8:	d810      	bhi.n	8003b1c <UART_SetConfig+0x1c0>
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <UART_SetConfig+0x1a8>
 8003afe:	2b40      	cmp	r3, #64	; 0x40
 8003b00:	d006      	beq.n	8003b10 <UART_SetConfig+0x1b4>
 8003b02:	e00b      	b.n	8003b1c <UART_SetConfig+0x1c0>
 8003b04:	2300      	movs	r3, #0
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e0cb      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	77fb      	strb	r3, [r7, #31]
 8003b0e:	e0c8      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003b10:	2304      	movs	r3, #4
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e0c5      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003b16:	2308      	movs	r3, #8
 8003b18:	77fb      	strb	r3, [r7, #31]
 8003b1a:	e0c2      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e0bf      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a45      	ldr	r2, [pc, #276]	; (8003c3c <UART_SetConfig+0x2e0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d125      	bne.n	8003b78 <UART_SetConfig+0x21c>
 8003b2c:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <UART_SetConfig+0x2d0>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b3a:	d017      	beq.n	8003b6c <UART_SetConfig+0x210>
 8003b3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b40:	d817      	bhi.n	8003b72 <UART_SetConfig+0x216>
 8003b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b46:	d00b      	beq.n	8003b60 <UART_SetConfig+0x204>
 8003b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b4c:	d811      	bhi.n	8003b72 <UART_SetConfig+0x216>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <UART_SetConfig+0x1fe>
 8003b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b56:	d006      	beq.n	8003b66 <UART_SetConfig+0x20a>
 8003b58:	e00b      	b.n	8003b72 <UART_SetConfig+0x216>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e0a0      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003b60:	2302      	movs	r3, #2
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e09d      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003b66:	2304      	movs	r3, #4
 8003b68:	77fb      	strb	r3, [r7, #31]
 8003b6a:	e09a      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	77fb      	strb	r3, [r7, #31]
 8003b70:	e097      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003b72:	2310      	movs	r3, #16
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e094      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a30      	ldr	r2, [pc, #192]	; (8003c40 <UART_SetConfig+0x2e4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d125      	bne.n	8003bce <UART_SetConfig+0x272>
 8003b82:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <UART_SetConfig+0x2d0>)
 8003b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b90:	d017      	beq.n	8003bc2 <UART_SetConfig+0x266>
 8003b92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b96:	d817      	bhi.n	8003bc8 <UART_SetConfig+0x26c>
 8003b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b9c:	d00b      	beq.n	8003bb6 <UART_SetConfig+0x25a>
 8003b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba2:	d811      	bhi.n	8003bc8 <UART_SetConfig+0x26c>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <UART_SetConfig+0x254>
 8003ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bac:	d006      	beq.n	8003bbc <UART_SetConfig+0x260>
 8003bae:	e00b      	b.n	8003bc8 <UART_SetConfig+0x26c>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e075      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	77fb      	strb	r3, [r7, #31]
 8003bba:	e072      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	77fb      	strb	r3, [r7, #31]
 8003bc0:	e06f      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	77fb      	strb	r3, [r7, #31]
 8003bc6:	e06c      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	e069      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <UART_SetConfig+0x2e8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d137      	bne.n	8003c48 <UART_SetConfig+0x2ec>
 8003bd8:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <UART_SetConfig+0x2d0>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003be2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003be6:	d017      	beq.n	8003c18 <UART_SetConfig+0x2bc>
 8003be8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bec:	d817      	bhi.n	8003c1e <UART_SetConfig+0x2c2>
 8003bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf2:	d00b      	beq.n	8003c0c <UART_SetConfig+0x2b0>
 8003bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf8:	d811      	bhi.n	8003c1e <UART_SetConfig+0x2c2>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <UART_SetConfig+0x2aa>
 8003bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c02:	d006      	beq.n	8003c12 <UART_SetConfig+0x2b6>
 8003c04:	e00b      	b.n	8003c1e <UART_SetConfig+0x2c2>
 8003c06:	2300      	movs	r3, #0
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e04a      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e047      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003c12:	2304      	movs	r3, #4
 8003c14:	77fb      	strb	r3, [r7, #31]
 8003c16:	e044      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003c18:	2308      	movs	r3, #8
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e041      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003c1e:	2310      	movs	r3, #16
 8003c20:	77fb      	strb	r3, [r7, #31]
 8003c22:	e03e      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003c24:	efff69f3 	.word	0xefff69f3
 8003c28:	40011000 	.word	0x40011000
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40004400 	.word	0x40004400
 8003c34:	40004800 	.word	0x40004800
 8003c38:	40004c00 	.word	0x40004c00
 8003c3c:	40005000 	.word	0x40005000
 8003c40:	40011400 	.word	0x40011400
 8003c44:	40007800 	.word	0x40007800
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a71      	ldr	r2, [pc, #452]	; (8003e14 <UART_SetConfig+0x4b8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d125      	bne.n	8003c9e <UART_SetConfig+0x342>
 8003c52:	4b71      	ldr	r3, [pc, #452]	; (8003e18 <UART_SetConfig+0x4bc>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c60:	d017      	beq.n	8003c92 <UART_SetConfig+0x336>
 8003c62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c66:	d817      	bhi.n	8003c98 <UART_SetConfig+0x33c>
 8003c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c6c:	d00b      	beq.n	8003c86 <UART_SetConfig+0x32a>
 8003c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c72:	d811      	bhi.n	8003c98 <UART_SetConfig+0x33c>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <UART_SetConfig+0x324>
 8003c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c7c:	d006      	beq.n	8003c8c <UART_SetConfig+0x330>
 8003c7e:	e00b      	b.n	8003c98 <UART_SetConfig+0x33c>
 8003c80:	2300      	movs	r3, #0
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e00d      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003c86:	2302      	movs	r3, #2
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e00a      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e007      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003c92:	2308      	movs	r3, #8
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e004      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e001      	b.n	8003ca2 <UART_SetConfig+0x346>
 8003c9e:	2310      	movs	r3, #16
 8003ca0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003caa:	d15b      	bne.n	8003d64 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003cac:	7ffb      	ldrb	r3, [r7, #31]
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d827      	bhi.n	8003d02 <UART_SetConfig+0x3a6>
 8003cb2:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <UART_SetConfig+0x35c>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003cdd 	.word	0x08003cdd
 8003cbc:	08003ce5 	.word	0x08003ce5
 8003cc0:	08003ced 	.word	0x08003ced
 8003cc4:	08003d03 	.word	0x08003d03
 8003cc8:	08003cf3 	.word	0x08003cf3
 8003ccc:	08003d03 	.word	0x08003d03
 8003cd0:	08003d03 	.word	0x08003d03
 8003cd4:	08003d03 	.word	0x08003d03
 8003cd8:	08003cfb 	.word	0x08003cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cdc:	f7fe fe5e 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8003ce0:	61b8      	str	r0, [r7, #24]
        break;
 8003ce2:	e013      	b.n	8003d0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ce4:	f7fe fe6e 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8003ce8:	61b8      	str	r0, [r7, #24]
        break;
 8003cea:	e00f      	b.n	8003d0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cec:	4b4b      	ldr	r3, [pc, #300]	; (8003e1c <UART_SetConfig+0x4c0>)
 8003cee:	61bb      	str	r3, [r7, #24]
        break;
 8003cf0:	e00c      	b.n	8003d0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cf2:	f7fe fd65 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8003cf6:	61b8      	str	r0, [r7, #24]
        break;
 8003cf8:	e008      	b.n	8003d0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cfe:	61bb      	str	r3, [r7, #24]
        break;
 8003d00:	e004      	b.n	8003d0c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	77bb      	strb	r3, [r7, #30]
        break;
 8003d0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d074      	beq.n	8003dfc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	005a      	lsls	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	441a      	add	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b0f      	cmp	r3, #15
 8003d2e:	d916      	bls.n	8003d5e <UART_SetConfig+0x402>
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d36:	d212      	bcs.n	8003d5e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f023 030f 	bic.w	r3, r3, #15
 8003d40:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	89fb      	ldrh	r3, [r7, #14]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	89fa      	ldrh	r2, [r7, #14]
 8003d5a:	60da      	str	r2, [r3, #12]
 8003d5c:	e04e      	b.n	8003dfc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	77bb      	strb	r3, [r7, #30]
 8003d62:	e04b      	b.n	8003dfc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d64:	7ffb      	ldrb	r3, [r7, #31]
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d827      	bhi.n	8003dba <UART_SetConfig+0x45e>
 8003d6a:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <UART_SetConfig+0x414>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003d95 	.word	0x08003d95
 8003d74:	08003d9d 	.word	0x08003d9d
 8003d78:	08003da5 	.word	0x08003da5
 8003d7c:	08003dbb 	.word	0x08003dbb
 8003d80:	08003dab 	.word	0x08003dab
 8003d84:	08003dbb 	.word	0x08003dbb
 8003d88:	08003dbb 	.word	0x08003dbb
 8003d8c:	08003dbb 	.word	0x08003dbb
 8003d90:	08003db3 	.word	0x08003db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d94:	f7fe fe02 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8003d98:	61b8      	str	r0, [r7, #24]
        break;
 8003d9a:	e013      	b.n	8003dc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d9c:	f7fe fe12 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8003da0:	61b8      	str	r0, [r7, #24]
        break;
 8003da2:	e00f      	b.n	8003dc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da4:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <UART_SetConfig+0x4c0>)
 8003da6:	61bb      	str	r3, [r7, #24]
        break;
 8003da8:	e00c      	b.n	8003dc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003daa:	f7fe fd09 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8003dae:	61b8      	str	r0, [r7, #24]
        break;
 8003db0:	e008      	b.n	8003dc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db6:	61bb      	str	r3, [r7, #24]
        break;
 8003db8:	e004      	b.n	8003dc4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	77bb      	strb	r3, [r7, #30]
        break;
 8003dc2:	bf00      	nop
    }

    if (pclk != 0U)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d018      	beq.n	8003dfc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	085a      	lsrs	r2, r3, #1
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	441a      	add	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b0f      	cmp	r3, #15
 8003de4:	d908      	bls.n	8003df8 <UART_SetConfig+0x49c>
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dec:	d204      	bcs.n	8003df8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	e001      	b.n	8003dfc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e08:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3720      	adds	r7, #32
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40007c00 	.word	0x40007c00
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	00f42400 	.word	0x00f42400

08003e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01a      	beq.n	8003f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f1e:	d10a      	bne.n	8003f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	605a      	str	r2, [r3, #4]
  }
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f74:	f7fc ffde 	bl	8000f34 <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d10e      	bne.n	8003fa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f817 	bl	8003fca <UART_WaitOnFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e00d      	b.n	8003fc2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fda:	e05e      	b.n	800409a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe2:	d05a      	beq.n	800409a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe4:	f7fc ffa6 	bl	8000f34 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d302      	bcc.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x30>
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d11b      	bne.n	8004032 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004008:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e043      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d02c      	beq.n	800409a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800404a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800404e:	d124      	bne.n	800409a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004058:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004068:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0201 	bic.w	r2, r2, #1
 8004078:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e00f      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69da      	ldr	r2, [r3, #28]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4013      	ands	r3, r2
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	bf0c      	ite	eq
 80040aa:	2301      	moveq	r3, #1
 80040ac:	2300      	movne	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d091      	beq.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040c4:	b084      	sub	sp, #16
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	f107 001c 	add.w	r0, r7, #28
 80040d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d120      	bne.n	800411e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	4b20      	ldr	r3, [pc, #128]	; (8004170 <USB_CoreInit+0xac>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004102:	2b01      	cmp	r3, #1
 8004104:	d105      	bne.n	8004112 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa5a 	bl	80045cc <USB_CoreReset>
 8004118:	4603      	mov	r3, r0
 800411a:	73fb      	strb	r3, [r7, #15]
 800411c:	e010      	b.n	8004140 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fa4e 	bl	80045cc <USB_CoreReset>
 8004130:	4603      	mov	r3, r0
 8004132:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	2b01      	cmp	r3, #1
 8004144:	d10b      	bne.n	800415e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f043 0206 	orr.w	r2, r3, #6
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f043 0220 	orr.w	r2, r3, #32
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800415e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800416a:	b004      	add	sp, #16
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	ffbdffbf 	.word	0xffbdffbf

08004174 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f023 0201 	bic.w	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041ae:	78fb      	ldrb	r3, [r7, #3]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d106      	bne.n	80041c2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	60da      	str	r2, [r3, #12]
 80041c0:	e00b      	b.n	80041da <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60da      	str	r2, [r3, #12]
 80041d4:	e001      	b.n	80041da <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e003      	b.n	80041e2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80041da:	2032      	movs	r0, #50	; 0x32
 80041dc:	f7fc feb6 	bl	8000f4c <HAL_Delay>

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041ec:	b084      	sub	sp, #16
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b086      	sub	sp, #24
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	e009      	b.n	8004220 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	3340      	adds	r3, #64	; 0x40
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	2200      	movs	r2, #0
 8004218:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	3301      	adds	r3, #1
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	2b0e      	cmp	r3, #14
 8004224:	d9f2      	bls.n	800420c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d11c      	bne.n	8004266 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800423a:	f043 0302 	orr.w	r3, r3, #2
 800423e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e005      	b.n	8004272 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004278:	461a      	mov	r2, r3
 800427a:	2300      	movs	r3, #0
 800427c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004284:	4619      	mov	r1, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428c:	461a      	mov	r2, r3
 800428e:	680b      	ldr	r3, [r1, #0]
 8004290:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	2b01      	cmp	r3, #1
 8004296:	d10c      	bne.n	80042b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800429e:	2100      	movs	r1, #0
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f959 	bl	8004558 <USB_SetDevSpeed>
 80042a6:	e018      	b.n	80042da <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042a8:	2101      	movs	r1, #1
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f954 	bl	8004558 <USB_SetDevSpeed>
 80042b0:	e013      	b.n	80042da <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d10c      	bne.n	80042d2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d104      	bne.n	80042c8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042be:	2100      	movs	r1, #0
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f949 	bl	8004558 <USB_SetDevSpeed>
 80042c6:	e008      	b.n	80042da <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042c8:	2101      	movs	r1, #1
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f944 	bl	8004558 <USB_SetDevSpeed>
 80042d0:	e003      	b.n	80042da <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042d2:	2103      	movs	r1, #3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f93f 	bl	8004558 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042da:	2110      	movs	r1, #16
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f8f3 	bl	80044c8 <USB_FlushTxFifo>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f911 	bl	8004514 <USB_FlushRxFifo>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004302:	461a      	mov	r2, r3
 8004304:	2300      	movs	r3, #0
 8004306:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430e:	461a      	mov	r2, r3
 8004310:	2300      	movs	r3, #0
 8004312:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431a:	461a      	mov	r2, r3
 800431c:	2300      	movs	r3, #0
 800431e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	e043      	b.n	80043ae <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800433c:	d118      	bne.n	8004370 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004350:	461a      	mov	r2, r3
 8004352:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	e013      	b.n	8004382 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004366:	461a      	mov	r2, r3
 8004368:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e008      	b.n	8004382 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437c:	461a      	mov	r2, r3
 800437e:	2300      	movs	r3, #0
 8004380:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438e:	461a      	mov	r2, r3
 8004390:	2300      	movs	r3, #0
 8004392:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a0:	461a      	mov	r2, r3
 80043a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	3301      	adds	r3, #1
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d3b7      	bcc.n	8004326 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	e043      	b.n	8004444 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043d2:	d118      	bne.n	8004406 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e6:	461a      	mov	r2, r3
 80043e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e013      	b.n	8004418 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	461a      	mov	r2, r3
 80043fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	e008      	b.n	8004418 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004412:	461a      	mov	r2, r3
 8004414:	2300      	movs	r3, #0
 8004416:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004424:	461a      	mov	r2, r3
 8004426:	2300      	movs	r3, #0
 8004428:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004436:	461a      	mov	r2, r3
 8004438:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800443c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	3301      	adds	r3, #1
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	429a      	cmp	r2, r3
 800444a:	d3b7      	bcc.n	80043bc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800445a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800445e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800446c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	f043 0210 	orr.w	r2, r3, #16
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699a      	ldr	r2, [r3, #24]
 8004484:	4b0e      	ldr	r3, [pc, #56]	; (80044c0 <USB_DevInit+0x2d4>)
 8004486:	4313      	orrs	r3, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800448c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f043 0208 	orr.w	r2, r3, #8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800449e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d105      	bne.n	80044b0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699a      	ldr	r2, [r3, #24]
 80044a8:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <USB_DevInit+0x2d8>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044bc:	b004      	add	sp, #16
 80044be:	4770      	bx	lr
 80044c0:	803c3800 	.word	0x803c3800
 80044c4:	40000004 	.word	0x40000004

080044c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	019b      	lsls	r3, r3, #6
 80044da:	f043 0220 	orr.w	r2, r3, #32
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3301      	adds	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <USB_FlushTxFifo+0x48>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d901      	bls.n	80044f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e006      	b.n	8004502 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d0f0      	beq.n	80044e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	00030d40 	.word	0x00030d40

08004514 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2210      	movs	r2, #16
 8004524:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3301      	adds	r3, #1
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a09      	ldr	r2, [pc, #36]	; (8004554 <USB_FlushRxFifo+0x40>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e006      	b.n	8004546 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b10      	cmp	r3, #16
 8004542:	d0f0      	beq.n	8004526 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	00030d40 	.word	0x00030d40

08004558 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	68f9      	ldr	r1, [r7, #12]
 8004574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004578:	4313      	orrs	r3, r2
 800457a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80045a4:	f023 0303 	bic.w	r3, r3, #3
 80045a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045b8:	f043 0302 	orr.w	r3, r3, #2
 80045bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3301      	adds	r3, #1
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4a13      	ldr	r2, [pc, #76]	; (8004630 <USB_CoreReset+0x64>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e01b      	b.n	8004622 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	daf2      	bge.n	80045d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f043 0201 	orr.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3301      	adds	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4a09      	ldr	r2, [pc, #36]	; (8004630 <USB_CoreReset+0x64>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e006      	b.n	8004622 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d0f0      	beq.n	8004602 <USB_CoreReset+0x36>

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	00030d40 	.word	0x00030d40

08004634 <__libc_init_array>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	4d0d      	ldr	r5, [pc, #52]	; (800466c <__libc_init_array+0x38>)
 8004638:	4c0d      	ldr	r4, [pc, #52]	; (8004670 <__libc_init_array+0x3c>)
 800463a:	1b64      	subs	r4, r4, r5
 800463c:	10a4      	asrs	r4, r4, #2
 800463e:	2600      	movs	r6, #0
 8004640:	42a6      	cmp	r6, r4
 8004642:	d109      	bne.n	8004658 <__libc_init_array+0x24>
 8004644:	4d0b      	ldr	r5, [pc, #44]	; (8004674 <__libc_init_array+0x40>)
 8004646:	4c0c      	ldr	r4, [pc, #48]	; (8004678 <__libc_init_array+0x44>)
 8004648:	f000 f820 	bl	800468c <_init>
 800464c:	1b64      	subs	r4, r4, r5
 800464e:	10a4      	asrs	r4, r4, #2
 8004650:	2600      	movs	r6, #0
 8004652:	42a6      	cmp	r6, r4
 8004654:	d105      	bne.n	8004662 <__libc_init_array+0x2e>
 8004656:	bd70      	pop	{r4, r5, r6, pc}
 8004658:	f855 3b04 	ldr.w	r3, [r5], #4
 800465c:	4798      	blx	r3
 800465e:	3601      	adds	r6, #1
 8004660:	e7ee      	b.n	8004640 <__libc_init_array+0xc>
 8004662:	f855 3b04 	ldr.w	r3, [r5], #4
 8004666:	4798      	blx	r3
 8004668:	3601      	adds	r6, #1
 800466a:	e7f2      	b.n	8004652 <__libc_init_array+0x1e>
 800466c:	080046c4 	.word	0x080046c4
 8004670:	080046c4 	.word	0x080046c4
 8004674:	080046c4 	.word	0x080046c4
 8004678:	080046c8 	.word	0x080046c8

0800467c <memset>:
 800467c:	4402      	add	r2, r0
 800467e:	4603      	mov	r3, r0
 8004680:	4293      	cmp	r3, r2
 8004682:	d100      	bne.n	8004686 <memset+0xa>
 8004684:	4770      	bx	lr
 8004686:	f803 1b01 	strb.w	r1, [r3], #1
 800468a:	e7f9      	b.n	8004680 <memset+0x4>

0800468c <_init>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr

08004698 <_fini>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	bf00      	nop
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr
